from types import CodeType
from typing import Any

class Insn:
    opc: int
    arg: int
    def __init__(self, opc: int, arg: int): ...

class Label(Insn):
    def __init__(self): ...
    def __eq__(self, other: Label): ...

class ExcTableEntry:
    from_lbl: Label
    to_lbl: Label
    handler_lbl: Label
    depth: int
    lasti: bool
    def __init__(
        self,
        from_lbl: Label,
        to_lbl: Label,
        handler_lbl: Label,
        depth: int,
        lasti: bool,
    ): ...

class VersionCodec:
    def encode_trycatch(
        self, exc_entry: ExcTableEntry, assembler: Assembler
    ) -> bytes: ...
    def encode_insn(self, insn: Insn, assembler: Assembler) -> bytes: ...

class VerCodec311(VersionCodec):
    def encode_trycatch(
        self, exc_entry: ExcTableEntry, assembler: Assembler
    ) -> bytes: ...
    def encode_insn(self, insn: Insn, assembler: Assembler) -> bytes: ...

def _encode_varint(value: int) -> bytes: ...

class Assembler:
    insns: list[Insn]
    consts: list[Any]
    names: list[str]
    varnames: list[str]
    exc_table_entries: list[ExcTableEntry]
    argnames: list[str]
    codec: VersionCodec
    def __init__(self, arg_names: list[str] = ..., codec: VersionCodec = ...): ...
    def current_bytecode_index(self) -> int: ...
    def insn(self, name: str, arg: int = ...): ...
    def label_codepos(self, lbl: Label): ...
    def label(self, lbl: Label = ...) -> Label: ...
    def add_insn(self, opcode: int, arg: int = ...): ...
    def add_trycatch(
        self,
        from_lbl: Label,
        to_lbl: Label,
        target_lbl: Label,
        depth: int,
        is_lasti: bool,
    ): ...
    def build_bytecode(self) -> bytes: ...
    def build_exceptiontable(self) -> bytes: ...
    def build(self) -> CodeType: ...
    def consts_create_or_get(self, value: Any) -> int: ...
    def names_create_or_get(self, value: str) -> int: ...
    def locals_create_or_get(self, value: str) -> int: ...
